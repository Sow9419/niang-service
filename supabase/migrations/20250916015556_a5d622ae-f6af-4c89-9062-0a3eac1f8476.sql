-- 1. CRÉATION DES TYPES PERSONNALISÉS (ENUMS)
CREATE TYPE public.type_produit AS ENUM ('Essence', 'Gasoil');
CREATE TYPE public.statut_commun AS ENUM ('Non Livré', 'Livré', 'Annulée');
CREATE TYPE public.statut_paiement AS ENUM ('PAYÉ', 'NON PAYÉ');
CREATE TYPE public.statut_conducteur AS ENUM ('available', 'on_delivery', 'maintenance');
CREATE TYPE public.statut_citerne AS ENUM ('Disponible', 'En livraison', 'En maintenance');

-- 2. Table pour les clients
CREATE TABLE public.clients (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    name TEXT NOT NULL,
    contact_person TEXT,
    email TEXT UNIQUE,
    phone TEXT,
    address TEXT,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE
);

ALTER TABLE public.clients ENABLE ROW LEVEL SECURITY;

-- 3. Table pour les conducteurs
CREATE TABLE public.conducteurs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    name TEXT NOT NULL,
    phone TEXT,
    avatar_url TEXT,
    status public.statut_conducteur NOT NULL DEFAULT 'available',
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE
);

ALTER TABLE public.conducteurs ENABLE ROW LEVEL SECURITY;

-- 4. Table pour les citernes
CREATE TABLE public.citernes (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    registration TEXT NOT NULL UNIQUE,
    capacity_liters INT,
    status public.statut_citerne NOT NULL DEFAULT 'Disponible',
    assigned_driver_id UUID UNIQUE REFERENCES public.conducteurs(id) ON DELETE SET NULL,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE
);

ALTER TABLE public.citernes ENABLE ROW LEVEL SECURITY;

-- 5. Table pour les commandes
CREATE TABLE public.commandes (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    order_number TEXT NOT NULL UNIQUE,
    client_id UUID NOT NULL REFERENCES public.clients(id),
    product public.type_produit NOT NULL,
    quantity INT NOT NULL,
    unit_price INT NOT NULL,
    estimated_amount BIGINT NOT NULL,
    order_date DATE NOT NULL DEFAULT CURRENT_DATE,
    status public.statut_commun NOT NULL DEFAULT 'Non Livré',
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE
);

ALTER TABLE public.commandes ENABLE ROW LEVEL SECURITY;

-- 6. Table pour les livraisons
CREATE TABLE public.livraisons (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    commande_id BIGINT NOT NULL UNIQUE REFERENCES public.commandes(id) ON DELETE CASCADE,
    citerne_id UUID NOT NULL REFERENCES public.citernes(id),
    volume_livre INT NOT NULL,
    volume_manquant INT NOT NULL,
    date_livraison DATE NOT NULL,
    status public.statut_commun NOT NULL DEFAULT 'Non Livré',
    payment_status public.statut_paiement NOT NULL DEFAULT 'NON PAYÉ',
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE
);

ALTER TABLE public.livraisons ENABLE ROW LEVEL SECURITY;

-- 7. POLITIQUES DE SÉCURITÉ (RLS) - Sécurisées par utilisateur
CREATE POLICY "Users can view their own clients" ON public.clients 
FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can create their own clients" ON public.clients 
FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own clients" ON public.clients 
FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own clients" ON public.clients 
FOR DELETE USING (auth.uid() = user_id);

CREATE POLICY "Users can view their own conducteurs" ON public.conducteurs 
FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can create their own conducteurs" ON public.conducteurs 
FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own conducteurs" ON public.conducteurs 
FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own conducteurs" ON public.conducteurs 
FOR DELETE USING (auth.uid() = user_id);

CREATE POLICY "Users can view their own citernes" ON public.citernes 
FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can create their own citernes" ON public.citernes 
FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own citernes" ON public.citernes 
FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own citernes" ON public.citernes 
FOR DELETE USING (auth.uid() = user_id);

CREATE POLICY "Users can view their own commandes" ON public.commandes 
FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can create their own commandes" ON public.commandes 
FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own commandes" ON public.commandes 
FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own commandes" ON public.commandes 
FOR DELETE USING (auth.uid() = user_id);

CREATE POLICY "Users can view their own livraisons" ON public.livraisons 
FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can create their own livraisons" ON public.livraisons 
FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own livraisons" ON public.livraisons 
FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own livraisons" ON public.livraisons 
FOR DELETE USING (auth.uid() = user_id);

-- 8. Triggers pour updated_at
CREATE TRIGGER update_clients_updated_at
BEFORE UPDATE ON public.clients
FOR EACH ROW
EXECUTE FUNCTION public.update_updated_at_column();

CREATE TRIGGER update_conducteurs_updated_at
BEFORE UPDATE ON public.conducteurs
FOR EACH ROW
EXECUTE FUNCTION public.update_updated_at_column();

CREATE TRIGGER update_citernes_updated_at
BEFORE UPDATE ON public.citernes
FOR EACH ROW
EXECUTE FUNCTION public.update_updated_at_column();

CREATE TRIGGER update_commandes_updated_at
BEFORE UPDATE ON public.commandes
FOR EACH ROW
EXECUTE FUNCTION public.update_updated_at_column();

CREATE TRIGGER update_livraisons_updated_at
BEFORE UPDATE ON public.livraisons
FOR EACH ROW
EXECUTE FUNCTION public.update_updated_at_column();